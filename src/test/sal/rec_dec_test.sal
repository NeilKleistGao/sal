rec Empty {}

rec Num { x: int, y: float }

rec WithDefault { s: string = "ez"}

rec Interface {
  fun f(x: int, y: int) = 42
}

val ez = new WithDefault{}
val func: Interface = new Interface{}
val n1 = new Num{1, 2.0}
val n2 = new Num{1}
val n3 = new Num{x = 3, y = 4.0}
val n4 = new Num{y = 3.0, x = 4}
val n5 = new Num{x = 3, 4.0}
val n6 = new Num{y = 3.0, 4}
val n7 = new Num{x = 5}
val n8 = new Num{y = 6.0}

val x1 = n1.x
val y1 = n1.y

val f = func.f

rec GG {
  g: int -> int
}

fun gf(x: int) = 42
val gg = new GG{ g = gf }

fun getX(num: Num) = num.x
fun createNum(x: int, y: float) = new Num{x, y}

val ggg = (new GG{ g = gf}).g(1)

rec GGinGG {
  gg: GG
}

val still42 = (new GGinGG{ new GG{ g = gf } }).gg.g(42)

rec Union1 {
  value: string | int | bool | float = ""
}

rec Union2 {
  value: string | int | bool | float = 42
}

rec Implement with Interface {
  x: int = 1,
  y: int = 2
}

rec Implement2 with Interface with GG {}

rec Implement3 with Implement {
  z: float
}

val w33 = new Implement3{x = 3, y = 3}

rec RecB

rec RecA {
  b: RecB
}

rec RecB {
  a: RecA
}

val aabb = new RecA{new RecB{}}
